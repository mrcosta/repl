use chrono::format::Fixed::TimezoneOffsetZ;
use chrono::Utc;
use chrono_tz::Tz;
use hmacsha1::hmac_sha1;
use itertools::Itertools;
use serde_json::Value;
use std::collections::HashMap;

pub async fn dns_made_easy_request() -> Result<(), Box<dyn std::error::Error>> {
    let time = chrono::offset::Utc::now().to_rfc2822();
    let time_replaced_by_gmt = time.replace("+0000", "GMT");
    // let hmac = get_hmac_as_string(&time);
    let hmac = get_hmac_as_string(&time_replaced_by_gmt);
    println!("TIME: {}", time);
    println!("TIME REPLACED: {}", time_replaced_by_gmt);
    println!("HMAC: {}", hmac);

    let client = reqwest::Client::new();
    let resp = client
        .get("https://api.dnsmadeeasy.com/V2.0/dns/managed//records?recordName=log.staging.next&type=A")
        .header("X-Dnsme-ApiKey", "")
        .header("X-Dnsme-Hmac", hmac)
        .header("X-Dnsme-RequestDate", time_replaced_by_gmt)
        .header("X-Dnsme-RequestDate", time)
        .send()
        .await?
        // .json::<HashMap<String, String>>()
        .json::<Value>()
        .await?;
    println!("{}", resp);
    // let data = "Sat, 12 Feb 2011 20:59:04 GMT".as_bytes();
    // println!("{}", String::from_utf8(&hash));
    // assert_eq!(String::from_utf8_lossy(&hash), expected);
    tira_teima();

    Ok(())
}

fn get_hmac_as_string(time: &String) -> String {
    let key = "10d45ad0-737e-4fdd-a440-80f2128d7d3c".as_bytes();
    let hash = hmac_sha1(key, time.as_bytes());
    hash.iter()
        .format_with("", |byte, f| f(&format_args!("{:02x}", byte)))
        .to_string()
}

fn tira_teima() {
    let key = "10d45ad0-737e-4fdd-a440-80f2128d7d3c".as_bytes();
    let hash = hmac_sha1(key, "Wed, 12 May 2021 12:21:40 GMT".as_bytes());
    println!(
        "generated by rust {}",
        hash.iter()
            .format_with("", |byte, f| f(&format_args!("{:02x}", byte)))
            .to_string()
    );
    println!("generated by terraform: 7bd83e74586b2cf3748cfcedeeb1a0e7b19871a1",)
}
